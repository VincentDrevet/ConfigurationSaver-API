// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Data;

#nullable disable

namespace ConfigurationSaver_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230513144212_Initialize database")]
    partial class Initializedatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("models.Credential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("models.ScheduleTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastRun")
                        .HasColumnType("datetime2");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextRun")
                        .HasColumnType("datetime2");

                    b.Property<int>("Second")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScheduleTasks");
                });

            modelBuilder.Entity("models.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CredentialId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("models.ServerScheduleTask", b =>
                {
                    b.Property<Guid>("ScheduleTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleTaskId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerScheduleTasks");
                });

            modelBuilder.Entity("models.Server", b =>
                {
                    b.HasOne("models.Credential", "Credential")
                        .WithMany("Servers")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credential");
                });

            modelBuilder.Entity("models.ServerScheduleTask", b =>
                {
                    b.HasOne("models.ScheduleTask", "ScheduleTask")
                        .WithMany("ServerScheduleTasks")
                        .HasForeignKey("ScheduleTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("models.Server", "Server")
                        .WithMany("ServerScheduleTasks")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleTask");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("models.Credential", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("models.ScheduleTask", b =>
                {
                    b.Navigation("ServerScheduleTasks");
                });

            modelBuilder.Entity("models.Server", b =>
                {
                    b.Navigation("ServerScheduleTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
